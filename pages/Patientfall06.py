import streamlit as st
import pandas as pd
from datetime import datetime
import os

st.set_page_config(page_title="Patientscenario 6 ‚Äì Aaro Niemi", layout="centered")
st.title("Patientscenario 6")

# ‚úèÔ∏è Patientfall
st.markdown("""
ü©∫ **Aaro Niemi, 80 √•r**

Aaro, fr√•n Finland, inkommer till sjukhuset med sv√•r andf√•ddhet n√§r han h√§lsar p√• sitt barnbarn i Stockholm.  
Han har aldrig haft KOL. Han tar n√•gon medicin pga tidigare hj√§rtinfarkt men minns inte namnet.  
Han gjorde en lungr√∂ntgen i Helsingfors f√∂r n√•gon m√•nad sedan.
""")

# üí¨ Studiekod
user_code = st.text_input("Ange din studiekod som du f√•r av intervjuaren och tryck enter:")
if user_code:
    user_code = user_code.zfill(3)
    st.success(f"Studiekod registrerad: {user_code}")

# üí° Funktion f√∂r HL7 FHIR-status
def select_fhir_status(label, key_prefix):
    st.markdown(f"**{label}**")
    options = ["(V√§lj)", "Bekr√§ftad", "Motbevisad", "Obekr√§ftad"]
    suboptions = ["(V√§lj)", "Provisorisk", "Differential"]

    main_selection = st.radio("", options, key=f"{key_prefix}_main")

    if main_selection == "Obekr√§ftad":
        st.markdown('<p style="font-size: 0.8rem; color: #0078D7; font-style: italic;">(Om du v√§ljer "Obekr√§ftad" m√•ste du v√§lja ett underalternativ)</p>', unsafe_allow_html=True)

    explanation = {
        "Bekr√§ftad": "Det finns tillr√§ckligt med bevis f√∂r att fastst√§lla f√∂rekomsten av tillst√•ndet.",
        "Motbevisad": "Tillst√•ndet har uteslutits av efterf√∂ljande diagnostiska och kliniska bevis.",
        "Obekr√§ftad": "Det finns inte tillr√§ckligt med bevis f√∂r att fastst√§lla f√∂rekomsten av tillst√•ndet."
    }

    if main_selection in explanation:
        st.markdown(f'<p style="font-size: 0.85rem; color: #555; font-style: italic;">{explanation[main_selection]}</p>', unsafe_allow_html=True)

    sub_selection = None
    if main_selection == "Obekr√§ftad":
        sub_selection = st.radio("**Underalternativ f√∂r Obekr√§ftad:**", suboptions, key=f"{key_prefix}_sub")

        sub_desc = {
            "Provisorisk": "Detta √§r en prelimin√§r diagnos som fortfarande √∂verv√§gs.",
            "Differential": "En m√∂jlig diagnos bland flera, f√∂r att v√§gleda vidare utredning."
        }

        if sub_selection in sub_desc:
            st.markdown(f'<p style="font-size: 0.85rem; color: #555; font-style: italic;">{sub_desc[sub_selection]}</p>', unsafe_allow_html=True)

    if main_selection == "(V√§lj)":
        return None
    elif main_selection == "Obekr√§ftad" and sub_selection and sub_selection != "(V√§lj)":
        return f"{main_selection} - {sub_selection}"
    elif main_selection == "Obekr√§ftad":
        return None
    else:
        return main_selection

# ‚ùì Fr√•gor
dyspnea = select_fhir_status("√Ñr patienten andf√•dd?", "dyspnea")
copd = select_fhir_status("Har patienten KOL?", "copd")
beta_blockers = select_fhir_status("Tar patienten betablockerare?", "beta_blockers")
lung_scan = select_fhir_status("Har patienten genomg√•tt lungr√∂ntgen nyligen?", "lung_scan")

# üìè Dokumentationss√§kerhet
confidence = st.slider("Hur s√§ker √§r du p√• din dokumentation?", 1, 7, 4)

# üìã Sammanfattning
st.subheader("üìã Sammanfattning")
st.write(f"- Andf√•ddhet: {dyspnea or 'Ej angiven'}")
st.write(f"- KOL: {copd or 'Ej angiven'}")
st.write(f"- Betablockerare: {beta_blockers or 'Ej angiven'}")
st.write(f"- Lungr√∂ntgen: {lung_scan or 'Ej angiven'}")
st.write(f"- Dokumentationss√§kerhet: {confidence}")

# üíæ CSV och spara
csv_file = "aaro_niemi_svar.csv"

if st.button("Skicka in"):
    if not user_code:
        st.error("V√§nligen ange din studiekod.")
    elif None in [dyspnea, copd, beta_blockers, lung_scan]:
        st.error("V√§nligen besvara alla fr√•gor.")
    else:
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        row = pd.DataFrame({
            "Datum": [current_time],
            "Kod": [user_code],
            "Andf√•ddhet": [dyspnea],
            "KOL": [copd],
            "Betablockerare": [beta_blockers],
            "Lungr√∂ntgen": [lung_scan],
            "Dokumentationss√§kerhet": [confidence]
        })

        if os.path.exists(csv_file):
            existing = pd.read_csv(csv_file)
            data = pd.concat([existing, row], ignore_index=True)
        else:
            data = row

        data.to_csv(csv_file, index=False)
        st.success("Svar sparade! ‚ú®")
